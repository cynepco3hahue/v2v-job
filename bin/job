#!/bin/bash

[[ "$DEBUG" ]] && set -x

echo "$@"

DSTD=${1:-/v2v-dst}
SRCTYPE=${2}
SRC=${3}

BASEDIR=$(readlink -f $(dirname $(readlink -f $0))/..)

die() { echo $@ >&2 ; exit 1 ; }

main() {
  [[ "$DSTD" ]] || die "No destination given"
  [[ "$SRCTYPE" ]] || die "No source type given"
  [[ "$SRC" ]] || die "No source given"

  if [[ "$SRC" = "example" ]]; then
    curl -LO https://download.fedoraproject.org/pub/fedora/linux/releases/27/CloudImages/x86_64/images/Fedora-Cloud-Base-27-1.6.x86_64.raw.xz
    xz -d Fedora-Cloud-Base-27-1.6.x86_64.raw.xz
    SRC=Fedora-Cloud-Base-27-1.6.x86_64.raw
  fi

  local SRC="$(readlink -f $SRC)"
  transformVM $SRCTYPE "$SRC"
  createEntities
  finalize
}

_prepDst() {
  # FIXME Assumes that there is just one disk
  local PVCNAME=${1}
  local PVCSIZE=${2:-8Gi}

  #
  # Now populate the PV
  #
  tee pvc.yaml <<EOY
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${PVCNAME}
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: ${PVCSIZE}
EOY
  kubectl create -f pvc.yaml

  tee receiver.yaml <<EOY
apiVersion: v1
kind: Pod
metadata:
  name: v2v-receiver-$PVCNAME
  labels:
    receiver-for: $PVCNAME
spec:
  restartPolicy: Never
  containers:
  - name: v2v
    image: quay.io/fabiand/v2v-pv-populator
    volumeMounts:
    - name: dst
      mountPath: /dst
  volumes:
  - name: dst
    persistentVolumeClaim:
      claimName: $PVCNAME
---
apiVersion: v1
kind: Service
metadata:
  labels:
    receiver-for: $PVCNAME
  name: v2v-receiver-$PVCNAME
spec:
  ports:
  - port: 54321
    protocol: TCP
    targetPort: 54321
  selector:
    receiver-for: $PVCNAME
  type: ClusterIP
EOY
  kubectl create -f receiver.yaml

  sleep "4.2s"

  # Wait for the pod to come up and try to send the image
  local N=30
  while [[ $N -gt 0 ]]; do
    echo "Trial $N to mount destination"
    wdfs http://v2v-receiver-$PVCNAME:54321 $DSTD && ( echo "Mounted!" ; break ; )
    sleep 10
    N=$(( $N - 1 ))
  done
  [[ $N = 0 ]] && die "Failed to mount dst"
}

_cleanDst() {
  umount $DSTD
  kubectl delete -f receiver.yaml
}

transformVM() {
  local SRCTYPE=$1
  local SRC="$2"

  echo "  Converting source: $SRC"

  ls -shal $SRC

  local NAME=$(basename $SRC | sed "s/[^a-zA-Z0-9-]/-/g" | tr "[:upper:]" "[:lower:]")

  #
  # Setup destination pvc and receiver for streaming
  _prepDst ${NAME}-disk


  #
  # Convert
  virt-v2v -i "$SRCTYPE" "$SRC" -o local -on $NAME -oa sparse -of raw -os $DSTD --machine-readable


  #
  # Sanity check
  if [[ $(xmllint --xpath "count(//disk[@type='file']/source)" $DOMXML) -gt 1 ]];
  then
    die "Only one disk per VM is supported ATM"
  fi


  #
  # Create YAML
  local DOMXML=$(ls $DSTD/*.xml)
  local VMYAML=${DOMXML%.xml}.yaml
  xsltproc $BASEDIR/data/toVMSpec.xsl $DOMXML | tee $VMYAML


  #
  # Relocate to final destination
  local DISKFILE=$(xmllint --xpath "string(//disk[@type='file']/source/@file)" $DOMXML)
  mv -v $DISKFILE $DSTD/disk.raw
  mv -v $VMYAML $DSTD/vm.yaml

  ls -shal $DSTD
}

createEntities() {
  local VMYAML=$DSTD/vm.yaml
  kubectl create -f $VMYAML
}

finalize() {
  _cleanDst
}

main
